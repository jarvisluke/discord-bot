import discord
from discord.ext import commands
import time
import platform
from colorama import Fore, Style
import json


# Returns formatted timestamp string
def get_timestamp():
    return time.strftime(f'{Style.BRIGHT + Fore.LIGHTBLUE_EX}%H:%M:%S EST{Style.RESET_ALL} ', time.localtime())


# Checks if attendance channel is created, creates one if not
async def get_channel(server: discord.Guild, name: str, topic: str):
    for channel in server.channels:
        if channel.name == name:
            return channel
    channel = await server.create_text_channel(name=name, reason=f'Generated by bot {client.user.mention}', topic=topic)
    return channel


# Client class
class Client(commands.Bot):
    def __init__(self):
        super().__init__(command_prefix=commands.when_mentioned_or('.'), intents=discord.Intents().all())
        self.cogs_list = ['cogs.Info', 'cogs.Wow']

    # Loads previous views from past sessions
    async def setup_hook(self) -> None:
        for ext in self.cogs_list:
            await self.load_extension(ext)
        self.add_view(ViewButton())

    # Loads when client is 'ready'
    async def on_ready(self):
        timestamp = get_timestamp()
        print(f'{timestamp}Logged in as: {client.user}')
        print(f'{timestamp}Bot ID: {str(client.user.id)}')
        print(f'{timestamp}Discord version: {discord.__version__}')
        print(f'{timestamp}Python version: {str(platform.python_version())}')
        cogs = str(len(self.cogs_list))
        print(f'{timestamp}Cogs loaded: {cogs}')
        cmds = str(len(await client.tree.sync()))
        print(f'{timestamp}Commands synced: {cmds}')


# Reads client token from json file
with open('config.json', 'r') as f:
    token = json.load(f)['TOKEN']
    f.close()

client = Client()


# Modal class
class MyModal(discord.ui.Modal, title='Raid Attendance Form'):
    date = discord.ui.TextInput(label='Date and/or time', placeholder='What day or time you will be not be present',
                                style=discord.TextStyle.short)
    length = discord.ui.TextInput(label='Length of time', placeholder='How long you will be absent for')
    occasion = discord.ui.TextInput(label='Occasion', placeholder='Reason for absence',
                                    style=discord.TextStyle.paragraph)

    async def on_submit(self, interaction: discord.Interaction, /) -> None:
        channel = await get_channel(server=interaction.guild, name='attendance', topic='Attendance form submissions')
        await channel.send(
            content=f'{interaction.user.mention} will be out on **{self.date}** for **{self.length}**, due to the following: {self.occasion}')
        await interaction.response.send_message(content='Your form as been successfully submitted', ephemeral=True)


# Button class
class ViewButton(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label='Rogue', style=discord.ButtonStyle.blurple, custom_id='001')
    async def rogue(self, interaction: discord.Interaction, button: discord.ui.Button):
        for emoji in interaction.guild.emojis:
            print(emoji.name, emoji.id)
        await interaction.channel.send(f'Hi, {interaction.user.mention}')


@client.tree.command(name='rogue', description='Sends a button to press')
async def rogue(interaction: discord.Interaction):
    await interaction.response.send_message(content='This message has a button', view=ViewButton())


# Shows modal
@client.tree.command(name='modal')
async def modal(interaction: discord.Interaction):
    await interaction.response.send_modal(MyModal())


client.run(token)
